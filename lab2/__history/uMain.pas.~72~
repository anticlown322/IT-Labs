Unit uMain;

Interface

Uses
    Winapi.Windows,
    Winapi.Messages,
    System.SysUtils,
    System.Variants,
    System.Classes,
    Vcl.Graphics,
    Vcl.Controls,
    Vcl.Forms,
    Vcl.Dialogs,
    Vcl.ExtCtrls,
    System.Actions,
    Vcl.ActnList,
    Vcl.PlatformDefaultStyleActnCtrls,
    Vcl.ActnMan,
    Vcl.Buttons,
    System.ImageList,
    Vcl.ImgList,
    Vcl.VirtualImageList,
    Vcl.ComCtrls,
    Vcl.StdCtrls,
    Vcl.Mask,
    Vcl.ExtDlgs,
    ES.BaseControls,
    ES.NinePatch,
    ES.Images,
    UTCipherEng;

Type
    TfrmMain = Class(TForm)
        PNav: TPanel;
        ActmngActions: TActionManager;
        ActClose: TAction;
        VilButtons_48: TVirtualImageList;
        SpdbtnLFSR: TSpeedButton;
        SpdbtnExit: TSpeedButton;
        SpdbtnHelp: TSpeedButton;
        PgcSections: TPageControl;
        TsLFSR: TTabSheet;
        ActChooseOption: TAction;
        LbTitle: TLabel;
        ActUseAlg: TAction;
        ActLoadFile: TAction;
        TsHelp: TTabSheet;
        ActSaveFile: TAction;
        POptions: TPanel;
        SpdbtnLoadFile: TSpeedButton;
        SpdbtnSaveFile: TSpeedButton;
        EsvimgBackground: TEsVirtualImage;
        LbWelcome: TLabel;
        LbHelp: TLabel;
        PTexts: TPanel;
        MmOutput: TMemo;
        LbCompany: TLabel;
        SpdbtnEncode: TSpeedButton;
        PGeneratedKey: TPanel;
        MmGeneratedKey: TMemo;
        LbGeneratedKey: TLabel;
        ActDecode: TAction;
        LbStartRegister: TLabel;
        ShpStartRegister: TShape;
        EStartRegister: TEdit;
        LbInputData: TLabel;
        PInputData: TPanel;
        MmInputData: TMemo;
        LbResult: TLabel;
        TsWelcome: TTabSheet;
        DlgLoadFile: TOpenDialog;
        DlgSaveFile: TSaveDialog;
        Procedure ActCloseExecute(Sender: TObject);
        Procedure FormShow(Sender: TObject);
        Procedure Dragging(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
        Procedure ActChooseOptionExecute(Sender: TObject);
        Procedure ActSaveFileExecute(Sender: TObject);
        Procedure ActLoadFileExecute(Sender: TObject);
        Procedure FormCreate(Sender: TObject);
        Procedure ActUseAlgExecute(Sender: TObject);
    Private
        Engine: TCipherEng;
        FileData, Answer: TArray<Byte>;
        //
        Function BytesToStr(Const Arr: TArray<Byte>): String;
    End;

Var
    FrmMain: TfrmMain;

Implementation

Uses
    UdtmdImages,
    UFormEnhances,
    System.IOUtils;
{$R *.dfm}
{ form methods }

Procedure TfrmMain.FormCreate(Sender: TObject);
Begin
    Engine := TCipherEng.Create;
End;

Procedure TfrmMain.FormShow(Sender: TObject);
Const
    BUTTON_CAP_ENCODE = 'Зашифровать';
    BUTTON_CAP_DECODE = 'Расшифровать';
    BUTTON_CAP_LOAD_FILES = 'Загрузить' + #13#10 + 'из файла';
    BUTTON_CAP_SAVE_FILES = 'Сохранить' + #13#10 + 'в файл';
Begin
    PgcSections.ActivePage := TsWelcome;

    // round corners
    RoundFormCorners(Self, CtRoundedCornerDefault);
    RoundCornerOf(PInputData, CtRoundedCornerDefault);
    RoundCornerOf(PGeneratedKey, CtRoundedCornerDefault);
    RoundCornerOf(PTexts, CtRoundedCornerDefault);
    // button caps
    SpdbtnEncode.Caption := BUTTON_CAP_ENCODE;
    SpdbtnLoadFile.Caption := BUTTON_CAP_LOAD_FILES;
    SpdbtnSaveFile.Caption := BUTTON_CAP_SAVE_FILES;
End;

Procedure TfrmMain.Dragging(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Begin
    UFormEnhances.Dragging(Self);
End;

Function TfrmMain.BytesToStr(Const Arr: TArray<Byte>): String;
Const
    MAX_STR_LEN = 1000;
Var
    I: Integer;
    Res: String;
Begin
    I := Low(Arr);
    Res := '';

    While (I <= High(Arr)) And (Length(Res) <= MAX_STR_LEN) Do
    Begin
        For Var Offset := 0 To 7 Do
            If ((Arr[I] Shr Offset) And 1) <> 0 Then
                Res := Res + '1'
            Else
                Res := Res + '0';
        Inc(I);
    End;

    Result := Res;
End;

{ Action manager - Form }

Procedure TfrmMain.ActChooseOptionExecute(Sender: TObject);
Var
    ButtonTag: Integer;
Begin
    ButtonTag := (Sender As TAction).ActionComponent.Tag;
    PgcSections.ActivePageIndex := ButtonTag;
End;

Procedure TfrmMain.ActCloseExecute(Sender: TObject);
Begin
    FreeAndNil(Engine);
    Close;
End;

{ Action manager - Ciphering }

Procedure TfrmMain.ActLoadFileExecute(Sender: TObject);
Var
    InputFile: File Of Byte;
    Buff: TArray<Byte>;
    Size: Integer;
Begin
    If DlgLoadFile.Execute() Then
    Begin
        AssignFile(InputFile, DlgLoadFile.FileName);
        Try
            Reset(InputFile);
            Try
                Size := Filesize(InputFile);
                Setlength(Buff, Size);
                While Not Eof(InputFile) Do
                    BlockRead(InputFile, Buff[0], Size);
                FileData := Copy(Buff);

                MmInputData.Text := BytesToStr(FileData);
            Except
                Application.MessageBox('Ошибка при чтении файла! ', 'Ошибка!', MB_ICONERROR);
            End;
        Finally
            CloseFile(InputFile);
        End;
    End;
End;

Procedure TfrmMain.ActSaveFileExecute(Sender: TObject);
Begin
    If DlgSaveFile.Execute() Then
    Begin
        Try
            TFile.WriteAllBytes(DlgSaveFile.FileName, FileData);
        Except
            Application.MessageBox('Ошибка при записи в файл! ', 'Ошибка!', MB_ICONERROR);
        End;
    End;
End;

Procedure TfrmMain.ActUseAlgExecute(Sender: TObject);
Begin
    If Engine.TranslateStrToReg(EStartRegister.Text) Then
    Begin
        Engine.CalcAns(FileData);
        Answer := Engine.TranslateBINDataToBytes;
        MmOutput.Text := BytesToStr(FileData);
    End
    Else
        Application.MessageBox('Начальное состояние регистра введено неверно! ', 'Ошибка!', MB_ICONERROR);
End;

End.
